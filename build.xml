<?xml version="1.0" encoding="ISO-8859-15"?>
<!--*****************************{begin:header}********************************
       XML Processing Snippets - https://code.google.com/p/xml-snippets/       
*******************************************************************************

        xml-snippets:   XML Processing Snippets 
                        with Some Theoretical Considerations

        Copyright (C) 2012 Jani Hautamäki <jani.hautamaki@hotmail.com>
  
        Licensed under the terms of GNU General Public License v3.

        You should have received a copy of the GNU General Public License v3
        along with this program as the file LICENSE.txt; if not, please see
        http://www.gnu.org/licenses/gpl-3.0.html

**********************************{end:header}******************************-->
<project name="xml-snippets" default="deploy" basedir=".">

  <!-- Description; just point at the Google Code web page -->
  <description>https://code.google.com/p/xml-snippets/</description>
    
  <!-- =================================================================== -->
  <!-- Configuration constants                                             -->
  <!-- =================================================================== -->

  <!-- Version number used in the distribution package name -->
  <property name="version"                    value="1.0.0" />

  <!-- File name for the class jar package -->
  <property name="classjar.file"              value="xml-snippets-${version}.jar" />
    
  <!-- Deployment directory name -->
  <property name="xmlsnippets.dir"            value="xml-snippets" />
    
  <property name="runscript.win.file"         value="xmlsnippet.bat" />
    
  <!-- =================================================================== -->
  <!-- Directory layout: root INPUT directories                            -->
  <!-- =================================================================== -->

  <!-- Directory for all source codes -->
  <property name="sources.dir"                location="./src" />
    
  <!-- Directory for all Java sources -->
  <property name="sources.snippets.dir"       location="${sources.dir}/snippets" />

  <!-- Third-party .jar files automatically included in classpath -->
  <property name="lib.dir"                    location="./lib" />
    
  <!-- Script templates directory -->
  <property name="templ.dir"                  location="./templ" />

  <!-- Snippet call script file name -->
  <property name="runscript.win.templ.file"   location="${templ.dir}/${runscript.win.file}.templ" />
  
  <!-- =================================================================== -->
  <!-- Directory layout: root OUTPUT directories                           -->
  <!-- =================================================================== -->

  <!-- Build root directory for compiled code -->
  <property name="build.dir"                  location="./build" />
    
  <!-- Build directory for all compiled Java code -->
  <property name="build.java.dir"             location="${build.dir}/java" />

  <!-- File name for the built class jar package -->
  <property name="build.classjar.file"        location="${build.dir}/${classjar.file}" />

  <!-- Build directory for all generated javadocs -->
  <property name="javadoc.dir"                location="./javadoc" />

  <!-- Position-independent executable, and run script -->
  <property name="deploy.dir"                 location="./deploy" />
    
  <!-- Deployed xml-snippets directory location -->
  <property name="deploy.xmlsnippets.dir"     location="${deploy.dir}/${xmlsnippets.dir}" />
    
  <!-- Deployed Windows runscript file location -->
  <property name="deploy.runscript.win.file"   location="${deploy.xmlsnippets.dir}/${runscript.win.file}" />
    
  <!-- Deployed xml-snippets class jar file location -->
  <!-- TODO? -->

  <!-- Redistributable package; package evolution -->
  <property name="dist.dir"                   location="./dist" />

  <!-- =================================================================== -->
  <!-- Java compilation options                                            -->
  <!-- =================================================================== -->
    
  <property name="compile.debug"       value="true" />
  <property name="compile.optimize"    value="true" />
  <property name="compile.target"      value="1.6" />
  <property name="compile.source"      value="1.6" />
  <property name="compile.deprecation" value="true" />

  <!-- Directory for javadocs generated documentation -->
  <property name="javadoc.dir"  location="javadoc" />

  <!-- File name for the testrun bat and its template prefix -->
  <property name="testrun.file" value="testrun.bat" />


  <!-- =================================================================== -->
  <!-- Automatic inclusion of all .jar files in the lib.dir                -->
  <!-- =================================================================== -->
  
  <!-- NOTE: These will have absolute paths -->
  <path id="classpath.lib">
    <fileset dir="${lib.dir}">
      <include name="**/*.jar" />
    </fileset>
  </path>


  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->
  <target name="prepare-build" depends=""
          description="prepares the build directory">
    <!-- Timestamp -->
    <tstamp />
    <!-- Create the build root -->
    <mkdir dir="${build.dir}" />
    <!-- Create sub-directory for compiled Java .class files -->
    <mkdir dir="${build.java.dir}" />
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the deploy directory                                       -->
  <!-- =================================================================== -->
  
  <target name="prepare-deploy" 
          description="prepares teh deploy directory"
          depends="">
    <!-- Timestamp -->
    <tstamp />
    <!-- Create the deploy root -->
    <mkdir dir="${deploy.dir}" />
    <!-- Create the deploy directory for xml-snippets class package -->
    <mkdir dir="${deploy.xmlsnippets.dir}" />
  </target>

  
  <!-- =================================================================== -->
  <!-- TODO: Propagate / redist                                            -->
  <!-- =================================================================== -->
  <target name="propagate" 
          depends=""
          description="propagate to a new distributable package">
    
    <!-- TODO: prepare dist -->
    <!-- TODO: identity transform -->
    <!-- TODO: propagate sources -->
    
    <!-- Example of propagating sources with identity transformation
    <copy todir="${build.sources.dir}" filtering="true">
        <fileset dir="${sources.dir}" />
    </copy>
    -->
  </target>


  <!-- =================================================================== -->
  <!-- Compiles the snippets directory                                     -->
  <!-- =================================================================== -->
  <target name="snippets" depends="prepare-build"
          description="Compiles the snippets directory">
        
    <!-- Execute javac -->
    <javac srcdir="${sources.snippets.dir}"
           destdir="${build.java.dir}"
           includeAntRuntime="no" 
           fork="no" 
           listfiles="yes"
           debug="${compile.debug}"
           optimize="${compile.optimize}"
           target="${compile.target}"
           source="${compile.source}"
           deprecation="${compile.deprecation}">
      <!-- The -classpath argument -->
      <classpath refid="classpath.lib"/>
    </javac>
  </target>

  <!-- =================================================================== -->
  <!-- Create a jar package of all class files                             -->
  <!-- =================================================================== -->
  <target name="classjar"
          depends="snippets"
          description="Creates a jar package">
    <!-- Create distributable jar package of the program into the dist.dir -->
    <jar jarfile="${build.classjar.file}" basedir="${build.java.dir}" />
  </target>

  <!-- =================================================================== -->
  <!-- Xlint the source files                                              -->
  <!-- =================================================================== -->
  
  <!-- Note: this is exactly the same as all javac commands in the other
  targets compiling source files expect for the additional compilerarg
  child element. -->
  <target name="xlint" 
          description="Xlint the source files"
          depends="prepare-build">
    <!-- Execute javac with -Xlint for snippets -->
    <javac srcdir="${sources.snippets.dir}"
           destdir="${build.java.dir}"
           includeAntRuntime="no" 
           fork="no" 
           listfiles="yes"
           debug="${compile.debug}"
           optimize="${compile.optimize}"
           target="${compile.target}"
           source="${compile.source}"
           deprecation="${compile.deprecation}">
      <!-- Pass argument: -Xlint -->
      <compilerarg value="-Xlint" />
      <!-- Pass argument: -classpath -->
      <classpath refid="classpath.lib"/>
    </javac>
  </target>

  <!-- =================================================================== -->
  <!-- Clean all dynamically created directories                           -->
  <!-- =================================================================== -->
  <target name="clean"
          description="clean all dynamically created directories"
          depends="">
    <!-- Remove the build directory -->
    <delete dir="${build.dir}" />
    <!-- Remoe the javadocs directory -->
    <delete dir="${javadoc.dir}" />
    <!-- Remove the deployment directory -->
    <delete dir="${deploy.dir}" />
  </target>
    
  <!-- =================================================================== -->
  <!-- Create position-independent deployment                              -->
  <!-- =================================================================== -->
  
  <target name="deploy"
          description="create position-independent installation direcotry"
          depends="classjar, prepare-deploy">
          
    <!-- Flatten 3rd party libs into the deployment dir -->
    <copy todir="${deploy.xmlsnippets.dir}"
          overwrite="true"
          flatten="true">
      <!-- All automatically include .jar packages -->
      <fileset dir="${lib.dir}">
        <include name="**/*.jar" />
      </fileset>
    </copy> 
    
    <!-- Flatten the built class jar file into the deployment dir also -->
    <copy todir="${deploy.xmlsnippets.dir}"
          file="${build.classjar.file}" />
    
    <!-- Create a file list out of all flattened jar files -->
    <path id="deploy.jars">
      <fileset dir="${deploy.xmlsnippets.dir}">
        <!-- Include automatically all .jar packages -->
        <include name="**/*.jar" />
      </fileset>
    </path>
    
    <!-- Copy the runscript template for Windows, and rename it -->
    <copy tofile="${deploy.runscript.win.file}"
          file="${runscript.win.templ.file}" 
          overwrite="true" />
          
    <!-- Instantiate the template for the deployment dir -->
    <replace file="${deploy.runscript.win.file}">
      <!-- Replace classpath argument -->
      <replacefilter>
        <replacetoken>$deploy.jars$</replacetoken>
        <replacevalue expandProperties="true">${ant.refid:deploy.jars}</replacevalue>
      </replacefilter>

      <!-- Replace absolute paths to the deployment directory
      with an environment variable called %DDIR% -->
      <replacefilter>
        <replacetoken expandProperties="true">${deploy.xmlsnippets.dir}</replacetoken>
        <replacevalue expandProperties="true">%DDIR%</replacevalue>
      </replacefilter>
      <!-- NOTE: The order is important here; if this replacement is
      performed before converting absolute paths an erraneous situation
      will occur. -->
      
      <!-- Replace $deploy.dir$ with the absolute path 
      of the xml-snippets deployment directory -->
      <replacefilter>
        <replacetoken>$deploy.dir$</replacetoken>
        <replacevalue expandProperties="true">${deploy.xmlsnippets.dir}</replacevalue>
      </replacefilter>
    </replace>
    
    <!-- Make a copy of the instantiated runscript to project root -->
    <copy tofile="${runscript.win.file}"
          file="${deploy.runscript.win.file}"
          overwrite="true" />
    
  </target>
  
  

    <!-- Create Javadocs out of the sources -->
    <target name="javadoc"
            description="compile javadocs">
        <mkdir dir="${javadoc.dir}" />
        
        <javadoc    packagenames="fi.uta.fsd.*,tests.*"
                    sourcepath="${src.dir}"
                    defaultexcludes="yes"
                    destdir="${javadoc.dir}"
                    author="true"
                    version="true"
                    use="true"
                    private="true"
                    >
                <!-- <fileset dir="${tests}" includes="*.java" /> -->
        </javadoc>
    </target>

</project>